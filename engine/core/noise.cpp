#include <numeric>
#include <algorithm>
#include <cmath>
#include <random>
#include "core/logger.h"
#include "core/noise.h"
#include "core/mathlib.h"

namespace cyb::noise2
{
    // primes for hashing
    static constexpr int primeX = 501125321;
    static constexpr int primeY = 1136930381;

    // Generated by gen_perlin_gradients.py
    static const double perlinGradients2D[] = {
        1.00000000000000000, 0.00000000000000000, 0.99518472667219693, 0.09801714032956060,
        0.98078528040323043, 0.19509032201612825, 0.95694033573220882, 0.29028467725446233,
        0.92387953251128674, 0.38268343236508978, 0.88192126434835505, 0.47139673682599764,
        0.83146961230254524, 0.55557023301960218, 0.77301045336273699, 0.63439328416364549,
        0.70710678118654757, 0.70710678118654757, 0.63439328416364549, 0.77301045336273688,
        0.55557023301960229, 0.83146961230254524, 0.47139673682599781, 0.88192126434835494,
        0.38268343236508984, 0.92387953251128674, 0.29028467725446233, 0.95694033573220894,
        0.19509032201612833, 0.98078528040323043, 0.09801714032956077, 0.99518472667219682,
        0.00000000000000006, 1.00000000000000000, -0.09801714032956065, 0.99518472667219693,
        -0.19509032201612819, 0.98078528040323043, -0.29028467725446216, 0.95694033573220894,
        -0.38268343236508973, 0.92387953251128674, -0.47139673682599770, 0.88192126434835505,
        -0.55557023301960196, 0.83146961230254535, -0.63439328416364538, 0.77301045336273710,
        -0.70710678118654746, 0.70710678118654757, -0.77301045336273699, 0.63439328416364549,
        -0.83146961230254535, 0.55557023301960218, -0.88192126434835494, 0.47139673682599781,
        -0.92387953251128674, 0.38268343236508989, -0.95694033573220882, 0.29028467725446239,
        -0.98078528040323043, 0.19509032201612861, -0.99518472667219682, 0.09801714032956083,
        -1.00000000000000000, 0.00000000000000012, -0.99518472667219693, -0.09801714032956059,
        -0.98078528040323043, -0.19509032201612836, -0.95694033573220894, -0.29028467725446211,
        -0.92387953251128685, -0.38268343236508967, -0.88192126434835505, -0.47139673682599764,
        -0.83146961230254546, -0.55557023301960196, -0.77301045336273710, -0.63439328416364527,
        -0.70710678118654768, -0.70710678118654746, -0.63439328416364593, -0.77301045336273666,
        -0.55557023301960218, -0.83146961230254524, -0.47139673682599786, -0.88192126434835494,
        -0.38268343236509034, -0.92387953251128652, -0.29028467725446244, -0.95694033573220882,
        -0.19509032201612866, -0.98078528040323032, -0.09801714032956045, -0.99518472667219693,
        -0.00000000000000018, -1.00000000000000000, 0.09801714032956009, -0.99518472667219693,
        0.19509032201612830, -0.98078528040323043, 0.29028467725446205, -0.95694033573220894,
        0.38268343236509000, -0.92387953251128663, 0.47139673682599759, -0.88192126434835505,
        0.55557023301960184, -0.83146961230254546, 0.63439328416364560, -0.77301045336273688,
        0.70710678118654735, -0.70710678118654768, 0.77301045336273655, -0.63439328416364593,
        0.83146961230254524, -0.55557023301960218, 0.88192126434835483, -0.47139673682599792,
        0.92387953251128652, -0.38268343236509039, 0.95694033573220882, -0.29028467725446250,
        0.98078528040323032, -0.19509032201612872, 0.99518472667219693, -0.09801714032956051
    };

    // Generated by gen_perlin_gradients.py
    static constexpr double worleyRandomVecs2D[] = {
        0.70953770440142638, -0.87846827278593209, -0.84373346475162680, 0.00620750346450394, 0.36596653851338146, -0.92353449956903444, -0.77347128003755450, 0.26175256169721162,
        -0.07379710633791281, 0.62119887283303021, -0.32816571554148521, -0.28600557136251181, -0.33197388834645114, -0.07085571566777449, 0.93258118235658394, 0.13865367805300166,
        -0.74773183185930181, -0.27852399164264963, -0.43540068772161100, -0.55726997432406411, 0.82254178290047220, -0.03602407874606905, 0.16391584075665988, -0.24522203099749640,
        0.21229725792339971, 0.87146845374123161, 0.92997974354925828, -0.81691232033777994, 0.18654959323110409, 0.86512743690288962, 0.80230862226332067, 0.14835163277548968,
        0.94681282267706979, 0.51308374186864625, 0.60448950973191029, 0.75470239464517053, -0.94018341119808757, -0.29763148453527832, 0.66022683701556839, 0.26947386136756424,
        0.44285647474154222, -0.76935756546911871, -0.84149541853248477, 0.87596085682956182, 0.63414000014132421, -0.30651160388344123, -0.55022020473697686, -0.09778322593865174,
        -0.16012100281792851, -0.63847526058190196, 0.44368137553158316, 0.08140377807955845, -0.16660399553871552, -0.96063340426038524, 0.11823949402939138, 0.37225589903405187,
        -0.87579964791094245, -0.01489787623679040, -0.20603642379717568, -0.96451112130969041, 0.34689873520602665, 0.07557449623018875, 0.74419547023083732, 0.23201240653029731,
        -0.02893942555507945, -0.51397537722849584, -0.12145677828919044, -0.97513435803173598, -0.00843304302194459, -0.25742234280345788, -0.10028463596934722, 0.23277462041995034,
        0.78191922573217165, 0.44095560579301329, 0.92306937198490679, -0.73160962417680042, 0.63851444522206968, 0.98844781732898923, 0.87285312093597445, -0.13838750707618108,
        -0.60923795377070777, -0.61600071433388148, -0.03310756815282923, -0.55211034014800875, -0.90298311619746308, 0.48289041632679242, 0.97133918311826140, -0.26006279263672916,
        -0.84896218101005316, 0.64900661223747025, 0.98225520134396582, -0.97159380577040921, -0.98888551803448599, 0.77677044113958704, 0.33540769494266764, -0.62879698542565454,
        -0.04144355587547000, 0.72663328048011833, -0.71313381805836662, -0.70897023249205926, 0.67447749431105652, 0.63841074978221068, -0.82926933094545485, -0.14888021391249207,
        0.89621655552733026, -0.08700161580008037, 0.07332263501753555, -0.06861493886352643, -0.74782141769050248, 0.47311566828518625, 0.88174574502843761, 0.22004390379685446,
        -0.60066611931448266, -0.70371205501120460, -0.02776438085444544, 0.53340484741455452, -0.52920660835171240, -0.62150443433552915, -0.11863272838607153, -0.78173892744518669,
        0.42370480241588671, 0.77226665813883044, 0.92046064321698884, 0.33742243384520743, 0.45002163125806560, -0.70972545326427028, -0.18501881530984066, 0.58450458647540726,
        0.29275959666732998, 0.52241093663284244, 0.68897292858271220, 0.19997407251040444, -0.82494614849356429, -0.51940150093310944, 0.63959585083835013, 0.47010288848791681,
        0.37053925370945406, 0.44524129651113786, 0.52867362778874294, -0.45803362025659355, -0.62258972774044108, 0.94796619261676818, 0.04155600233375889, -0.61339102283046398,
        0.13338076751350747, -0.35097812234742420, 0.23283849264861778, 0.48530924338920745, 0.50089829308318889, -0.40793477614897866, -0.13471947324501965, 0.23764510232283742,
        0.27284321390751232, -0.00537278252342643, -0.17174700993415537, -0.12083542942072678, 0.00984248571426782, 0.69698508664877235, 0.97679197774593574, -0.92343765129442468,
        -0.94259544856967459, 0.34443776504594137, -0.46115907365912356, 0.45538467957972872, 0.56280978184325314, 0.18815586293062680, 0.88668982587833245, 0.52247924175212734,
        -0.27309086957663165, 0.10789436478500813, 0.36891581394607198, 0.87122042738036254, -0.16800762752719556, -0.55614115277294096, -0.16397949226041186, 0.35716536909261931,
        0.33247482638847536, 0.29920008731221981, -0.59319974724758584, 0.68003956132906684, -0.66364182858025877, 0.21403634538410143, 0.02525289379508400, 0.59335006565431803,
        0.54638908549479193, -0.15221855505806192, 0.93854263700087959, 0.42967300604450287, 0.55150246493850696, 0.45758805983580175, -0.01746543407855006, 0.51234195087357293,
        -0.78459870649030039, 0.70583877831254438, -0.76831076086911576, 0.34153328820528328, -0.58465795485113481, -0.00436881775986508, -0.44502986444793247, 0.61565596051004157,
        0.86396723273600595, 0.69728488269554179, -0.64076641359996866, -0.65137807228659628, -0.77287067347212735, 0.27640754217157726, -0.86653030844797208, -0.12691766780474678,
        0.10692316679687353, -0.82284859979067781, -0.51462006691179196, -0.95876006350001153, -0.25036866981193096, 0.04764036060059618, 0.35283229204630340, 0.00348049807761797,
        0.46287437476289961, -0.27975068432563144, 0.48855680061219853, -0.97560273517740081, 0.18678675349238705, -0.29940488621981598, 0.72967251780201958, 0.93592250671766797,
        -0.10968978764376081, 0.03601748189018705, 0.00538765700060506, -0.07916196101913830, 0.80696395850987845, 0.36105081072484113, -0.93027978903321751, 0.50774178897051692,
        0.38099759510208142, 0.44744594075229349, -0.48710816502787591, 0.71108269502371546, 0.14888184785960057, 0.18863411083104564, -0.45991709056653240, -0.26534683409287974,
        -0.34681303260053120, 0.07821381402446326, -0.98696608507636263, 0.02802953288994026, 0.23558984210118528, -0.85451376288499836, -0.54804897894049298, 0.95820995215820548,
        -0.13527174602156689, -0.55534916842089177, 0.77093901563020051, -0.54275177842760236, 0.31859514698967972, 0.03400555658342097, 0.49619689510219089, -0.97118976733952000,
        0.50844814473591993, 0.04193054549994324, -0.97600453132692278, -0.16402864244634596, 0.04349667821799619, 0.27164377512203108, 0.18892611397709458, -0.81619622871805886,
        -0.57070763201809749, -0.05497413562123121, 0.45942765088466864, -0.84985085570938734, -0.90442201550110046, -0.37144857703342637, 0.37499731196854413, -0.38062959982855138,
        -0.24261811262044541, -0.69269598227497653, 0.04208608483759746, 0.75703814487156817, -0.31998276603406062, -0.03329747179112230, 0.42525939858934581, -0.75568083387969165,
        -0.30433693473325407, 0.96096630055841148, -0.18124795032210650, 0.01947365817526348, -0.86829880600325571, -0.11941908687724356, -0.03442667161976654, 0.47203282670653457,
        -0.73028239948420781, 0.86805795787902151, 0.41638538987275098, -0.26606557309004764, 0.35906184122380536, -0.81972104043097160, -0.09086375205779240, 0.63136692907047576,
        0.67096326769712844, 0.06628498577716346, 0.83293797403305936, -0.06778866832980923, 0.18968038456986092, -0.72009996843454194, 0.94915745849575450, 0.72933324958776691,
        0.05746897604619572, 0.95443609270087193, -0.59845531453850520, 0.39659895137385059, 0.93983530751519306, -0.44696884008728666, -0.54766924086657287, 0.04166806328881090,
        0.03890788001549628, 0.65887822478693669, -0.01668851173760766, 0.08312369935252839, 0.75694067522204733, 0.75747547554093808, -0.00259773083728221, 0.35888035091111936,
        -0.52028509409354506, -0.54042221003658453, -0.02930481224288140, 0.16401199669604116, -0.16082684784067847, -0.08857352410913899, 0.74047316217092018, -0.12542198812450223,
        -0.85416119323971995, 0.80792607874405098, 0.25473811940345836, 0.45460034983114350, 0.78106158506865309, 0.53943122014669775, -0.40090864872136733, -0.96371815274130657,
        0.06010717863218251, -0.44474041001938946, 0.69747204481660119, 0.88094861916757283, -0.46728115541362558, 0.80113245560392610, 0.74448554466948114, -0.57396792667722463,
        0.26003245865689695, -0.51276943895396743, 0.33508852595603500, -0.06938524574965155, 0.73116764961325620, 0.85743217563567620, 0.37497809407386296, 0.29921416210937135,
        0.17954823858064017, -0.42066055791247847, 0.00451974434605562, -0.27237691805311570, 0.91363292190124579, -0.68081279617623514, -0.08966502434524171, -0.92234728216083073,
        -0.50985204383565219, -0.65543606445331992, 0.79220371493856323, -0.36942534903967017, -0.10696782444766373, 0.14646344438774550, 0.81626515069141359, -0.85352985568687401,
        -0.87972311785553337, 0.76707588122566461, 0.39523483499447076, 0.87012719127732896, 0.45101361846624211, 0.03746422161562379, 0.67750760406339960, -0.58861744869436050,
        0.05775761198141449, 0.36543995211745206, 0.79470612186654455, 0.35608659277254651, -0.55399462265656685, 0.83962515666569826, -0.69922085797597244, 0.43210126722528419,
        -0.78893671843877233, 0.36460983072639652, 0.84770464539466039, -0.51601915196765735, 0.43334253004509082, -0.05839411989025556, -0.32253135601620375, 0.12478913468310804,
        0.45725883549089152, -0.96193431069347746, -0.04578936870600048, -0.03312130321392459, -0.95854242971904657, 0.58264308511121121, -0.71841081758107461, -0.38871995455634978,
        -0.75995277903622038, -0.72576689705164155, -0.52416110295710294, 0.50898033780033258, -0.38247934418627594, -0.45006743363577928, -0.84517767160058987, 0.82556955829582290,
        -0.84570322192197622, -0.46990905534491900, 0.67523551980762186, 0.22207711150096121, 0.73176165213075062, -0.57865995880440146, 0.54690678459449527, 0.27269894622577873,
        0.52823221797384701, -0.81523260430858646, -0.65788391919869804, -0.52380988336061973, -0.81717775435381546, 0.39642887862270837, 0.54763156140983549, -0.37305263816485357,
        -0.52085629711904957, 0.56710154288410997, -0.85743189883529936, -0.05714131629718899, 0.89724787533038741, 0.93878831972229992, -0.70991853752702738, -0.04119935126986851,
        -0.28415270053546782, 0.98649110949425145, 0.42727604670855035, -0.82720243652029168, -0.54346120409416510, -0.62172456342338900, 0.29078621574753472, 0.05562111943245074,
        0.22832189507654377, 0.47620198330271135, 0.33816727995132423, 0.85758445043941833, 0.43280817099729019, 0.56176772457269974, -0.80675790447304752, -0.54218953880569654,
        0.16116570096597194, -0.62608869453677296, 0.96010691155994077, -0.82766904554555176, 0.68026560700484806, -0.84442271819669390, 0.93821128660898800, 0.87571627338732361,
        -0.01620068109005057, 0.33588449582497226, -0.41367225713815459, -0.13644281088410604, -0.13278382372360920, -0.23697221768425236, 0.09269178336721384, 0.94882693378326866,
        -0.12119201848204075, 0.42181542056662580, 0.49783932365375505, 0.43757766037823909, -0.14046331563746173, -0.27456554469963312, -0.38538743690040422, -0.75440134615704557,
        -0.28555176933509552, -0.56123304281790665, -0.59302775984427636, -0.88656471803435388, -0.78349573225694247, 0.63922323234901923, -0.69213020480411469, -0.55968255472160133,
        0.58171332199203052, -0.29592555553835198, 0.35796110333290532, 0.98614272039053041, -0.59977592964903059, -0.95309396214966435, 0.55435972992318794, 0.31867285463225437,
        -0.60219444703117442, -0.94036364939157902, -0.51734348566344446, 0.40569983578569713, 0.35370643824334458, -0.99210035640615901, -0.11101916890656005, 0.02941000020474016,
        -0.08126884470391982, -0.82537007232350179, 0.33399306888663816, -0.94435667955634739, 0.86714530615201468, 0.16537944321682674, 0.97120837466445131, 0.29871350580943501,
        0.38258340315510675, -0.63827972836043889, -0.00870929606983184, 0.37451584814280214, 0.55255228580863203, -0.51496201508657746, 0.19420254998101671, 0.86549583420501564
    };

    [[nodiscard]] static double MakeInt32Range(double n)
    {
        if (n >= 1073741824.0)
            return (2.0 * fmod(n, 1073741824.0)) - 1073741824.0;
        else if (n <= -1073741824.0)
            return (2.0 * fmod(n, 1073741824.0)) + 1073741824.0;
        return n;
    }

    [[nodiscard]] static constexpr int Hash(int seed, int xPrimed, int yPrimed)
    {
        int hash = seed ^ xPrimed ^ yPrimed;
        hash *= 0x27d4eb2d;
        return hash;
    }

    [[nodiscard]] static inline double GradCoord(int seed, int x, int y, double xd, double yd)
    {
        int hash = Hash(seed, x, y);
        hash ^= hash >> 15;
        int index = (hash & 0x3F) * 2;
        return xd * perlinGradients2D[index] + yd * perlinGradients2D[index + 1];
    }

    [[nodiscard]] static double PerlinNoise2D(double x, double y, int seed)
    {
        const int x0 = static_cast<int>(std::floor(x)) * primeX;
        const int y0 = static_cast<int>(std::floor(y)) * primeY;
        const int x1 = x0 + primeX;
        const int y1 = y0 + primeY;

        const double xd0 = x - std::floor(x);
        const double yd0 = y - std::floor(y);
        const double xd1 = xd0 - 1.0;
        const double yd1 = yd0 - 1.0;

        const double xs = SepticSmoothStep(xd0);
        const double ys = SepticSmoothStep(yd0);

        const double n00 = GradCoord(seed, x0, y0, xd0, yd0);
        const double n10 = GradCoord(seed, x1, y0, xd1, yd0);
        const double n01 = GradCoord(seed, x0, y1, xd0, yd1);
        const double n11 = GradCoord(seed, x1, y1, xd1, yd1);

        const double xf0 = Lerp(n00, n10, xs);
        const double xf1 = Lerp(n01, n11, xs);
        const double result = Lerp(xf0, xf1, ys);

        // Try to map the result to [0..1] range.
        return (1.0 + result * 1.6409504127933312) * 0.5;
    }

    [[nodiscard]] static double CellularNoise2D(double x, double y, uint32_t seed, double jitterModifier)
    {
        const int xr = static_cast<int>(std::lround(x));
        const int yr = static_cast<int>(std::lround(y));

        double distance0 = std::numeric_limits<double>::max();
        double distance1 = std::numeric_limits<double>::max();
        int closestHash = 0;

        const double cellularJitter = 0.43701595 * jitterModifier;

        int xPrimed = (xr - 1) * primeX;
        const int yPrimedBase = (yr - 1) * primeY;

        for (int xi = xr - 1; xi <= xr + 1; xi++)
        {
            int yPrimed = yPrimedBase;

            for (int yi = yr - 1; yi <= yr + 1; yi++)
            {
                const int hash = Hash(seed, xPrimed, yPrimed);
                const int idx = hash & (255 << 1);

                const double vecX = (double)(xi - x) + worleyRandomVecs2D[idx] * cellularJitter;
                const double vecY = (double)(yi - y) + worleyRandomVecs2D[idx | 1] * cellularJitter;
                const double newDistance = vecX * vecX + vecY * vecY;

                distance1 = std::max(std::min(distance1, newDistance), distance0);
                if (newDistance < distance0)
                {
                    distance0 = newDistance;
                    closestHash = hash;
                }

                yPrimed += primeY;
            }

            xPrimed += primeX;
        }

        // try to map the output to a [0..1] range
        return (distance0 * 1.15);
    }

    double NoiseNode_Perlin::GetValue(double x, double y) const
    {
        double value = 0.0;
        double amplitude = 1.0;
        double amplitudeSum = 0.0;
        double frequency = m_frequency;

        for (uint32_t i = 0; i < m_octaves; i++)
        {
            const double signal = PerlinNoise2D(
                MakeInt32Range(x * frequency), 
                MakeInt32Range(y * frequency),
                (m_seed + i) & 0xffffffff);

            value += signal * amplitude;
            amplitudeSum += amplitude;
            amplitude *= m_persistence;
            frequency *= m_lacunarity;
        }

        const double fractalBounding = 1.0 / std::sqrt(amplitudeSum);
        return value * fractalBounding;
    }

    double NoiseNode_Cellular::GetValue(double x, double y) const
    {
        double value = 0.0;
        double amplitude = 1.0;
        double frequency = m_frequency;

        for (uint32_t i = 0; i < m_octaves; i++)
        {
            const double signal = CellularNoise2D(
                MakeInt32Range(x * frequency),
                MakeInt32Range(y * frequency),
                (m_seed + i) & 0xffffffff,
                m_jitterModifier);
            
            value += signal * amplitude;
            amplitude *= m_persistence;
            frequency *= m_lacunarity;
        }

        return value;
    }

    double NoiseNode_Blend::GetValue(double x, double y) const
    {
        assert(GetInput(0) != nullptr);
        assert(GetInput(1) != nullptr);

        const double value0 = GetInput(0)->GetValue(x, y);
        const double value1 = GetInput(1)->GetValue(x, y);
        return Lerp(value0, value1, m_alpha);
    }

    double NoiseNode_Invert::GetValue(double x, double y) const
    {
        assert(GetInput(0) != nullptr);

        const double value0 = GetInput(0)->GetValue(x, y);
        return 1.0 - value0;
    }

    double NoiseNode_ScaleBias::GetValue(double x, double y) const
    {
        assert(GetInput(0) != nullptr);

        const double value0 = GetInput(0)->GetValue(x, y);
        return value0 * m_scale + m_bias;
    }

    double NoiseNode_Strata::GetValue(double x, double y) const
    {
        assert(GetInput(0) != nullptr);

        const double value0 = GetInput(0)->GetValue(x, y);
        const double stepValue = std::floor(value0 * m_strata) / m_strata;
        const double t = CubicSmoothStep((value0 * m_strata) - std::floor(value0 * m_strata));
        return Lerp(stepValue, value0, t);
    }

    double NoiseNode_Select::GetValue(double x, double y) const
    {
        assert(GetInput(0) != nullptr);
        assert(GetInput(1) != nullptr);
        assert(GetInput(2) != nullptr);

        const double value0 = GetInput(0)->GetValue(x, y);
        const double value1 = GetInput(1)->GetValue(x, y);
        const double controlValue = GetInput(2)->GetValue(x, y);

        if (m_edgeFalloff > 0.0 )
        {
            const double lower = m_threshold - m_edgeFalloff;
            const double upper = m_threshold + m_edgeFalloff;

            if (controlValue < lower)
                return value0;
            else if (controlValue > upper)
                return value1;
            else
            {
                const double alpha = CubicSmoothStep((controlValue - lower) / (2.0 * m_edgeFalloff));
                return Lerp(value0, value1, alpha);
            }
        }

        return  (controlValue < m_threshold) ? value0 : value1;
    }

    NoiseImage::NoiseImage(const NoiseImageDimensions& size) :
        m_size(size)
    {
        m_stride = sizeof(Color) * m_size.width;
        m_image = std::make_unique<Color[]>(m_size.width * m_size.height);
    }

    NoiseImage::Color* NoiseImage::GetPtr(uint32_t row)
    {
        return GetPtr(0, row);
    }

    NoiseImage::Color* NoiseImage::GetPtr(uint32_t x, uint32_t y)
    {
        return &(m_image.get()[y * m_size.width + x]);
    }

    const NoiseImage::Color* NoiseImage::GetConstPtr(uint32_t row) const
    {
        return GetConstPtr(0, row);
    }

    const NoiseImage::Color* NoiseImage::GetConstPtr(uint32_t x, uint32_t y) const
    {
        return &(m_image.get()[y * m_size.width + x]);
    }

    size_t NoiseImage::GetMemoryUsage() const
    {
        return m_stride * m_size.height;
    }

    std::shared_ptr<NoiseImage> RenderNoiseImage(const NoiseImageDesc& desc)
    {
        assert(desc.input != nullptr);
        assert(desc.size.width > 0);
        assert(desc.size.height > 0);

        auto mapToColor = [] (double value) -> NoiseImage::Color {
            uint8_t color = static_cast<uint8_t>(std::clamp(255.0 * value, 0.0, 255.0));
            return NoiseImage::Color{ color, color, color, 0xff };
        };

        auto image = std::make_shared<NoiseImage>(desc.size);
        double maxV = std::numeric_limits<double>::min();
        double minV = std::numeric_limits<double>::max();

        for (uint32_t y = 0; y < desc.size.height; ++y)
        {
            NoiseImage::Color* dest = image->GetPtr(y);
            for (uint32_t x = 0; x < desc.size.width; ++x)
            {
                const double value = desc.input->GetValue(
                    (double(x + desc.offset.x) * desc.freqScale) * 0.002,
                    (double(y + desc.offset.y) * desc.freqScale) * 0.002);
                *dest = mapToColor(value);

                maxV = std::max(maxV, value);
                minV = std::min(minV, value);

                ++dest;
            }
        }

        //CYB_TRACE("minV = {:.4f}, maxV = {:.4f}", minV, maxV);
        return image;
    }
}

namespace cyb::noise
{
    struct Lookup
    {
        static const float gradients2D[];
        static const float randomVecs2D[];
    };

    const float Lookup::gradients2D[] = {
        0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f, 0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
        0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f, -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
        0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f, -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
        -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
        -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f, 0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
        -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f, 0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
        0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f, 0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
        0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f, -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
        0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f, -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
        -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
        -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f, 0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
        -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f, 0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
        0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f, 0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
        0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f, -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
        0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f, -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
        -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
        -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f, 0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
        -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f, 0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
        0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f, 0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
        0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f, -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
        0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f, -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
        -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
        -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f, 0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
        -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f, 0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
        0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f, 0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
        0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f, -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
        0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f, -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
        -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
        -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f, 0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
        -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f, 0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
        0.38268343236509f, 0.923879532511287f, 0.923879532511287f, 0.38268343236509f, 0.923879532511287f, -0.38268343236509f, 0.38268343236509f, -0.923879532511287f,
        -0.38268343236509f, -0.923879532511287f, -0.923879532511287f, -0.38268343236509f, -0.923879532511287f, 0.38268343236509f, -0.38268343236509f, 0.923879532511287f,
    };

    const float Lookup::randomVecs2D[] = {
        -0.2700222198f, -0.9628540911f, 0.3863092627f, -0.9223693152f, 0.04444859006f, -0.999011673f, -0.5992523158f, -0.8005602176f, -0.7819280288f, 0.6233687174f, 0.9464672271f, 0.3227999196f, -0.6514146797f, -0.7587218957f, 0.9378472289f, 0.347048376f,
        -0.8497875957f, -0.5271252623f, -0.879042592f, 0.4767432447f, -0.892300288f, -0.4514423508f, -0.379844434f, -0.9250503802f, -0.9951650832f, 0.0982163789f, 0.7724397808f, -0.6350880136f, 0.7573283322f, -0.6530343002f, -0.9928004525f, -0.119780055f,
        -0.0532665713f, 0.9985803285f, 0.9754253726f, -0.2203300762f, -0.7665018163f, 0.6422421394f, 0.991636706f, 0.1290606184f, -0.994696838f, 0.1028503788f, -0.5379205513f, -0.84299554f, 0.5022815471f, -0.8647041387f, 0.4559821461f, -0.8899889226f,
        -0.8659131224f, -0.5001944266f, 0.0879458407f, -0.9961252577f, -0.5051684983f, 0.8630207346f, 0.7753185226f, -0.6315704146f, -0.6921944612f, 0.7217110418f, -0.5191659449f, -0.8546734591f, 0.8978622882f, -0.4402764035f, -0.1706774107f, 0.9853269617f,
        -0.9353430106f, -0.3537420705f, -0.9992404798f, 0.03896746794f, -0.2882064021f, -0.9575683108f, -0.9663811329f, 0.2571137995f, -0.8759714238f, -0.4823630009f, -0.8303123018f, -0.5572983775f, 0.05110133755f, -0.9986934731f, -0.8558373281f, -0.5172450752f,
        0.09887025282f, 0.9951003332f, 0.9189016087f, 0.3944867976f, -0.2439375892f, -0.9697909324f, -0.8121409387f, -0.5834613061f, -0.9910431363f, 0.1335421355f, 0.8492423985f, -0.5280031709f, -0.9717838994f, -0.2358729591f, 0.9949457207f, 0.1004142068f,
        0.6241065508f, -0.7813392434f, 0.662910307f, 0.7486988212f, -0.7197418176f, 0.6942418282f, -0.8143370775f, -0.5803922158f, 0.104521054f, -0.9945226741f, -0.1065926113f, -0.9943027784f, 0.445799684f, -0.8951327509f, 0.105547406f, 0.9944142724f,
        -0.992790267f, 0.1198644477f, -0.8334366408f, 0.552615025f, 0.9115561563f, -0.4111755999f, 0.8285544909f, -0.5599084351f, 0.7217097654f, -0.6921957921f, 0.4940492677f, -0.8694339084f, -0.3652321272f, -0.9309164803f, -0.9696606758f, 0.2444548501f,
        0.08925509731f, -0.996008799f, 0.5354071276f, -0.8445941083f, -0.1053576186f, 0.9944343981f, -0.9890284586f, 0.1477251101f, 0.004856104961f, 0.9999882091f, 0.9885598478f, 0.1508291331f, 0.9286129562f, -0.3710498316f, -0.5832393863f, -0.8123003252f,
        0.3015207509f, 0.9534596146f, -0.9575110528f, 0.2883965738f, 0.9715802154f, -0.2367105511f, 0.229981792f, 0.9731949318f, 0.955763816f, -0.2941352207f, 0.740956116f, 0.6715534485f, -0.9971513787f, -0.07542630764f, 0.6905710663f, -0.7232645452f,
        -0.290713703f, -0.9568100872f, 0.5912777791f, -0.8064679708f, -0.9454592212f, -0.325740481f, 0.6664455681f, 0.74555369f, 0.6236134912f, 0.7817328275f, 0.9126993851f, -0.4086316587f, -0.8191762011f, 0.5735419353f, -0.8812745759f, -0.4726046147f,
        0.9953313627f, 0.09651672651f, 0.9855650846f, -0.1692969699f, -0.8495980887f, 0.5274306472f, 0.6174853946f, -0.7865823463f, 0.8508156371f, 0.52546432f, 0.9985032451f, -0.05469249926f, 0.1971371563f, -0.9803759185f, 0.6607855748f, -0.7505747292f,
        -0.03097494063f, 0.9995201614f, -0.6731660801f, 0.739491331f, -0.7195018362f, -0.6944905383f, 0.9727511689f, 0.2318515979f, 0.9997059088f, -0.0242506907f, 0.4421787429f, -0.8969269532f, 0.9981350961f, -0.061043673f, -0.9173660799f, -0.3980445648f,
        -0.8150056635f, -0.5794529907f, -0.8789331304f, 0.4769450202f, 0.0158605829f, 0.999874213f, -0.8095464474f, 0.5870558317f, -0.9165898907f, -0.3998286786f, -0.8023542565f, 0.5968480938f, -0.5176737917f, 0.8555780767f, -0.8154407307f, -0.5788405779f,
        0.4022010347f, -0.9155513791f, -0.9052556868f, -0.4248672045f, 0.7317445619f, 0.6815789728f, -0.5647632201f, -0.8252529947f, -0.8403276335f, -0.5420788397f, -0.9314281527f, 0.363925262f, 0.5238198472f, 0.8518290719f, 0.7432803869f, -0.6689800195f,
        -0.985371561f, -0.1704197369f, 0.4601468731f, 0.88784281f, 0.825855404f, 0.5638819483f, 0.6182366099f, 0.7859920446f, 0.8331502863f, -0.553046653f, 0.1500307506f, 0.9886813308f, -0.662330369f, -0.7492119075f, -0.668598664f, 0.743623444f,
        0.7025606278f, 0.7116238924f, -0.5419389763f, -0.8404178401f, -0.3388616456f, 0.9408362159f, 0.8331530315f, 0.5530425174f, -0.2989720662f, -0.9542618632f, 0.2638522993f, 0.9645630949f, 0.124108739f, -0.9922686234f, -0.7282649308f, -0.6852956957f,
        0.6962500149f, 0.7177993569f, -0.9183535368f, 0.3957610156f, -0.6326102274f, -0.7744703352f, -0.9331891859f, -0.359385508f, -0.1153779357f, -0.9933216659f, 0.9514974788f, -0.3076565421f, -0.08987977445f, -0.9959526224f, 0.6678496916f, 0.7442961705f,
        0.7952400393f, -0.6062947138f, -0.6462007402f, -0.7631674805f, -0.2733598753f, 0.9619118351f, 0.9669590226f, -0.254931851f, -0.9792894595f, 0.2024651934f, -0.5369502995f, -0.8436138784f, -0.270036471f, -0.9628500944f, -0.6400277131f, 0.7683518247f,
        -0.7854537493f, -0.6189203566f, 0.06005905383f, -0.9981948257f, -0.02455770378f, 0.9996984141f, -0.65983623f, 0.751409442f, -0.6253894466f, -0.7803127835f, -0.6210408851f, -0.7837781695f, 0.8348888491f, 0.5504185768f, -0.1592275245f, 0.9872419133f,
        0.8367622488f, 0.5475663786f, -0.8675753916f, -0.4973056806f, -0.2022662628f, -0.9793305667f, 0.9399189937f, 0.3413975472f, 0.9877404807f, -0.1561049093f, -0.9034455656f, 0.4287028224f, 0.1269804218f, -0.9919052235f, -0.3819600854f, 0.924178821f,
        0.9754625894f, 0.2201652486f, -0.3204015856f, -0.9472818081f, -0.9874760884f, 0.1577687387f, 0.02535348474f, -0.9996785487f, 0.4835130794f, -0.8753371362f, -0.2850799925f, -0.9585037287f, -0.06805516006f, -0.99768156f, -0.7885244045f, -0.6150034663f,
        0.3185392127f, -0.9479096845f, 0.8880043089f, 0.4598351306f, 0.6476921488f, -0.7619021462f, 0.9820241299f, 0.1887554194f, 0.9357275128f, -0.3527237187f, -0.8894895414f, 0.4569555293f, 0.7922791302f, 0.6101588153f, 0.7483818261f, 0.6632681526f,
        -0.7288929755f, -0.6846276581f, 0.8729032783f, -0.4878932944f, 0.8288345784f, 0.5594937369f, 0.08074567077f, 0.9967347374f, 0.9799148216f, -0.1994165048f, -0.580730673f, -0.8140957471f, -0.4700049791f, -0.8826637636f, 0.2409492979f, 0.9705377045f,
        0.9437816757f, -0.3305694308f, -0.8927998638f, -0.4504535528f, -0.8069622304f, 0.5906030467f, 0.06258973166f, 0.9980393407f, -0.9312597469f, 0.3643559849f, 0.5777449785f, 0.8162173362f, -0.3360095855f, -0.941858566f, 0.697932075f, -0.7161639607f,
        -0.002008157227f, -0.9999979837f, -0.1827294312f, -0.9831632392f, -0.6523911722f, 0.7578824173f, -0.4302626911f, -0.9027037258f, -0.9985126289f, -0.05452091251f, -0.01028102172f, -0.9999471489f, -0.4946071129f, 0.8691166802f, -0.2999350194f, 0.9539596344f,
        0.8165471961f, 0.5772786819f, 0.2697460475f, 0.962931498f, -0.7306287391f, -0.6827749597f, -0.7590952064f, -0.6509796216f, -0.907053853f, 0.4210146171f, -0.5104861064f, -0.8598860013f, 0.8613350597f, 0.5080373165f, 0.5007881595f, -0.8655698812f,
        -0.654158152f, 0.7563577938f, -0.8382755311f, -0.545246856f, 0.6940070834f, 0.7199681717f, 0.06950936031f, 0.9975812994f, 0.1702942185f, -0.9853932612f, 0.2695973274f, 0.9629731466f, 0.5519612192f, -0.8338697815f, 0.225657487f, -0.9742067022f,
        0.4215262855f, -0.9068161835f, 0.4881873305f, -0.8727388672f, -0.3683854996f, -0.9296731273f, -0.9825390578f, 0.1860564427f, 0.81256471f, 0.5828709909f, 0.3196460933f, -0.9475370046f, 0.9570913859f, 0.2897862643f, -0.6876655497f, -0.7260276109f,
        -0.9988770922f, -0.047376731f, -0.1250179027f, 0.992154486f, -0.8280133617f, 0.560708367f, 0.9324863769f, -0.3612051451f, 0.6394653183f, 0.7688199442f, -0.01623847064f, -0.9998681473f, -0.9955014666f, -0.09474613458f, -0.81453315f, 0.580117012f,
        0.4037327978f, -0.9148769469f, 0.9944263371f, 0.1054336766f, -0.1624711654f, 0.9867132919f, -0.9949487814f, -0.100383875f, -0.6995302564f, 0.7146029809f, 0.5263414922f, -0.85027327f, -0.5395221479f, 0.841971408f, 0.6579370318f, 0.7530729462f,
        0.01426758847f, -0.9998982128f, -0.6734383991f, 0.7392433447f, 0.639412098f, -0.7688642071f, 0.9211571421f, 0.3891908523f, -0.146637214f, -0.9891903394f, -0.782318098f, 0.6228791163f, -0.5039610839f, -0.8637263605f, -0.7743120191f, -0.6328039957f,
    };

    // hashing
    static const int primeX = 501125321;
    static const int primeY = 1136930381;
    static int Hash(int seed, int xPrimed, int yPrimed) noexcept
    {
        int hash = seed ^ xPrimed ^ yPrimed;
        hash *= 0x27d4eb2d;
        return hash;
    }

    static float GradCoord(int seed, int xPrimed, int yPrimed, float xd, float yd) noexcept
    {
        int hash = Hash(seed, xPrimed, yPrimed);
        hash ^= hash >> 15;
        hash &= 127 << 1;

        float xg = Lookup::gradients2D[hash];
        float yg = Lookup::gradients2D[hash | 1];

        return xd * xg + yd * yg;
    }

    Generator::Generator(const Parameters& params_) noexcept :
        params(params_)
    {
        CalculateFractalBounding();
    }

    void Generator::CalculateFractalBounding() noexcept
    {
        float amp = params.gain;
        float ampFractal = 1.0f;
        for (uint32_t i = 1; i < params.octaves; i++)
        {
            ampFractal += amp;
            amp *= params.gain;
        }
        fractalBounding = 1.0f / ampFractal;
    }

    float Generator::GetValue(float x, float y) const noexcept
    {
        x *= params.frequency;
        y *= params.frequency;

        float sum = 0.0f;
        float amp = 1;

        for (uint32_t i = 0; i < params.octaves; i++)
        {
            sum += GetNoiseSingle(params.seed + i, x, y) * amp;
            x *= params.lacunarity;
            y *= params.lacunarity;
            amp *= params.gain;
        }

        return sum * fractalBounding;
    }

    float Generator::GetNoiseSingle(uint32_t seed, float x, float y) const noexcept
    {
        switch (params.type)
        {
        case Type::Perlin:      return SinglePerlin(seed, x, y);
        case Type::Cellular:    return SingleCellular(seed, x, y);
        }

        assert(0);
        return 0.0f;
    }

    float Generator::SinglePerlin(uint32_t seed, float x, float y) const noexcept
    {
        const float fx = std::floor(x);
        const float fy = std::floor(y);

        const float xd0 = x - fx;
        const float yd0 = y - fy;
        const float xd1 = xd0 - 1.0f;
        const float yd1 = yd0 - 1.0f;

        const float xs = QuinticSmoothStep(xd0);
        const float ys = QuinticSmoothStep(yd0);

        const int x0 = static_cast<int>(fx) * primeX;
        const int y0 = static_cast<int>(fy) * primeY;
        const int x1 = x0 + primeX;
        const int y1 = y0 + primeY;

        const float xf0 = Lerp(GradCoord(seed, x0, y0, xd0, yd0), GradCoord(seed, x1, y0, xd1, yd0), xs);
        const float xf1 = Lerp(GradCoord(seed, x0, y1, xd0, yd1), GradCoord(seed, x1, y1, xd1, yd1), xs);

        // try to map the output to a [0..1] range
        return (Lerp(xf0, xf1, ys) + 0.28f) * 3.47f;
    }

    float Generator::SingleCellular(uint32_t seed, float x, float y) const noexcept
    {
        int xr = Round(x);
        int yr = Round(y);

        float distance0 = 1e10f;
        float distance1 = 1e10f;
        int closestHash = 0;

        float cellularJitter = 0.43701595f * params.cellularJitterModifier;

        int xPrimed = (xr - 1) * primeX;
        int yPrimedBase = (yr - 1) * primeY;

        for (int xi = xr - 1; xi <= xr + 1; xi++)
        {
            int yPrimed = yPrimedBase;

            for (int yi = yr - 1; yi <= yr + 1; yi++)
            {
                int hash = Hash(seed, xPrimed, yPrimed);
                int idx = hash & (255 << 1);

                float vecX = (float)(xi - x) + Lookup::randomVecs2D[idx] * cellularJitter;
                float vecY = (float)(yi - y) + Lookup::randomVecs2D[idx | 1] * cellularJitter;

                float newDistance = vecX * vecX + vecY * vecY;

                distance1 = Max(Min(distance1, newDistance), distance0);
                if (newDistance < distance0)
                {
                    distance0 = newDistance;
                    closestHash = hash;
                }
                yPrimed += primeY;
            }
            xPrimed += primeX;
        }

        // try to map the output to a [0..1] range
        // only CellularReturn::Distance mapping is checked
        switch (params.cellularReturnType)
        {
        case CellularReturn::CellValue:
            return closestHash * (1 / 2147483648.0f);
        case CellularReturn::Distance:
            return (distance0) * 2.9f;
        case CellularReturn::Distance2:
            return distance1 - 1;
        case CellularReturn::Distance2Add:
            return (distance1 + distance0) * 0.5f - 1;
        case CellularReturn::Distance2Sub:
            return distance1 - distance0 - 1;
        case CellularReturn::Distance2Mul:
            return distance1 * distance0 * 0.5f - 1;
        case CellularReturn::Distance2Div:
            return distance0 / distance1 - 1;
        default:
            return 0;
        }
    }
}